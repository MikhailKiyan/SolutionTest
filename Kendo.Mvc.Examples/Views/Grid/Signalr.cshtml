<script src="https://unpkg.com/@@aspnet/signalr@1.0.0/dist/browser/signalr.js"></script>
<script>
    var url = "https://demos.telerik.com/aspnet-core/service/signalr/hubs/products";

    var hub = new signalR.HubConnectionBuilder()
        .withUrl(url, {
            transport: signalR.HttpTransportType.LongPolling
        })
        .build();

    var hubStart = hub.start();

    function onPush(e) {
        var notification = $("#notification").data("kendoNotification");
        notification.success(e.type);
        var grid = $("#Grid").getKendoGrid();
        var editRow = grid.wrapper.find(".k-grid-edit-row")[0];

        if (editRow) {
            kendo.alert("The current view has been updated while you were editing. The grid will be refreshed in order to display the new data.");
            grid.cancelRow();
            grid.refresh();
        }
    }
</script>

@(Html.Kendo().Notification()
                .Name("notification")
                .Width("100%")
                .Position(position => position
                    .Top(0)
                    .Left(0))
)

@(Html.Kendo().Grid<Kendo.Mvc.Examples.Models.ProductViewModel>()
                .Name("Grid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.UnitPrice);
                    columns.Bound(p => p.ProductName);
                    columns.Command(command =>
                    {
                        command.Edit();
                    }).Width(200);
                })
                .HtmlAttributes(new { style = "height: 550px;margin-bottom:20px;" })
                .ToolBar(toolbar =>
                {
                    toolbar.Create();
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                .Sortable()
                .Scrollable()
                .DataSource(dataSource => dataSource
                    .SignalR()
                    .Events(events => events.Push("onPush"))
                    .Sort(s => s.Add("ID").Descending())
                    .Transport(tr => tr
                        .Promise("hubStart")
                        .Hub("hub")
                        .Client(c => c
                            .Read("read")
                            .Create("create")
                            .Update("update")
                            .Destroy("destroy"))
                        .Server(s => s
                            .Read("read")
                            .Create("create")
                            .Update("update")
                            .Destroy("destroy")))
                    .Schema(schema => schema
                        .Model(model =>
                        {
                            model.Id("ID");
                            model.Field("ID", typeof(int)).Editable(false);
                            model.Field("CreatedAt", typeof(DateTime));
                            model.Field("UnitPrice", typeof(int));
                        })
                    )
                )
)

<br />
<div class="box wide">
    <h4>Information</h4>
    <p>This example demonstrates real-time push-notifications from <a href="https://docs.microsoft.com/en-us/aspnet/core/signalr/?view=aspnetcore-2.1">SignalR</a>. To see the real-time updates:</p>
    <ol>
        <li>Open this page in another browser window by clicking <a href="./signalr" target="_new">here</a></li>
        <li>Create, update or destroy grid items.</li>
    </ol>
    <p>
        <strong>Note:</strong> To further enhance real-time experience, the Grid will also display changes from other users,
        which currently happen to perform CRUD operations on the same demo.
        If you refresh the page, all changes will be lost, because the remote service only broadcasts changes, it does not actually save them.
    </p>
</div>